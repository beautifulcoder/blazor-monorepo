// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BlazorApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Counter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CurrentCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("counters", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CurrentCount = 0
                        });
                });

            modelBuilder.Entity("DataAccess.WeatherForecast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Summary")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<int>("TemperatureC")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("weather_forecasts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateOnly(2025, 5, 11),
                            Summary = "Warm",
                            TemperatureC = 20
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateOnly(2023, 5, 12),
                            Summary = "Cool",
                            TemperatureC = 15
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateOnly(2023, 5, 13),
                            Summary = "Cold",
                            TemperatureC = 10
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateOnly(2023, 5, 14),
                            Summary = "Hot",
                            TemperatureC = 25
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateOnly(2023, 5, 15),
                            Summary = "Very Hot",
                            TemperatureC = 30
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
